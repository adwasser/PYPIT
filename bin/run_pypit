#!/usr/bin/env python
#
# See top-level LICENSE file for Copyright information
#
# -*- coding: utf-8 -*-

"""
This script pushes a FITS file to ginga
"""
from __future__ import (print_function, absolute_import, division,
                        unicode_literals)

def main() :

    import os
    import sys
    import getopt
    import traceback

    # Import PYPIT routines
    from pypit import ardebug
    debug = ardebug.init()
    #debug['develop'] = True
    #debug['arc'] = True
    #debug['sky_sub'] = True
    #debug['trace'] = True
    #debug['obj_profile'] = True
    #debug['tilts'] = True
    #debug['flexure'] = True
    from pypit import pypit
    from pypit import pyputils

    try:
        from linetools.spectra.xspectrum1d import XSpectrum1D
    except ImportError:
        pass

    try:
        from xastropy.xutils import xdebug as debugger
    except ImportError:
        import pdb as debugger

    # Initiate logging for bugs and comand line help
    # These messages will not be saved to a log file
    from pypit.armsgs import Messages as Initmsg
    version, last_updated = pyputils.get_version()
    initmsgs = Initmsg(None, debug, last_updated, version, 1)
    # Set the default variables
    red = "script.pypit"
    qck = False
    cpu = 1
    vrb = 2
    use_masters = False

    if len(sys.argv) < 2:
        initmsgs.usage(None)

    # Load options from command line
    try:
        opt, arg = getopt.getopt(sys.argv[1:], 'hmqc:v:', ['help',
                                                           'use_masters',
                                                          'quick',
                                                          'cpus',
                                                          'verbose'])
        for o, a in opt:
            if o in ('-h', '--help'):
                initmsgs.usage(None)
            elif o in ('-q', '--quick'):
                qck = True
            elif o in ('-c', '--cpus'):
                cpu = int(a)
            elif o in ('-v', '--verbose'):
                vrb = int(a)
            elif o in ('-m', '--use_masters'):
                use_masters=True
        splitnm = os.path.splitext(arg[0])
        if splitnm[1] != '.pypit':
            initmsgs.error("Bad extension for PYPIT reduction file."+initmsgs.newline()+".pypit is required")
        lnm = splitnm[0] + ".log"
        red = arg[0]
    except getopt.GetoptError, err:
        initmsgs.error(err.msg, usage=True)

    # Execute the reduction, and catch any bugs for printout
    if debug['develop']:
        pypit.PYPIT(red, progname=pypit.__file__, quick=qck, ncpus=cpu, verbose=vrb,
              logname=lnm, use_masters=use_masters)
    else:
        try:
            pypit.PYPIT(red, progname=pypit.__file__, quick=qck, ncpus=cpu, verbose=vrb,
                  logname=lnm, use_masters=use_masters)
        except:
            # There is a bug in the code, print the file and line number of the error.
            et, ev, tb = sys.exc_info()
            filename, line_no = "<filename>", "<line_no>"
            while tb:
                co = tb.tb_frame.f_code
                filename = str(co.co_filename)
                line_no = str(traceback.tb_lineno(tb))
                tb = tb.tb_next
            filename = filename.split('/')[-1]
            if str(ev) != "":
                initmsgs.bug("There appears to be a bug on Line " + line_no + " of " + filename + " with error:" +
                             initmsgs.newline() + str(ev) + initmsgs.newline() +
                             "---> please contact the authors")
            # Get armsgs instance to terminate
            from pypit.armsgs import get_logger
            get_logger().close()


if __name__ == '__main__':
    main()
